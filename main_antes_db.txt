from fastapi import FastAPI, Body, Path, Query, Request, HTTPException, Depends
from fastapi.responses import HTMLResponse, JSONResponse
from pydantic import BaseModel, Field
from typing import Optional
from user_jwt import createToken, validateToken
from fastapi.security import HTTPBearer
from bd.database import Session, engine, Base 
from models.movies import Movie as ModielMovie

app = FastAPI(
    title ='Aprendiendo FastAPI',
    description='Una api en los primeros pasos',
    version='0.0.1'
)

Base.metadata.create_all(bind=engine)

class BearerJWT(HTTPBearer):
    async def __call__(self, request: Request):
        auth = await super().__call__(request)
        data= validateToken(auth.credentials)
        if data['email'] != 'nicolas':
            raise HTTPException(status_code=403, detail='Credenciales incorrectas')
    
class User(BaseModel):
    email: str
    password: str


class Movie(BaseModel):
    id: Optional [int] = None
    title: str = Field(default='Titulo de la pelicula',min_lengh=5, max_lengh=60)
    overview: str = Field(default='Descripcion de la pelicula',min_lengh=5, max_lengh=60)
    year: int = Field(default=2023)
    rating: float = Field(ge=1, le=10)
    category: str = Field(min_lengh=3, max_lengh=15,default='Aqui va la categoria')

    def to_dict(self):
        return{
            "id" : self.id,
            "title" : self.title,
            "overview" : self.overview,
            "year" : self.year,
            "rating" : self.rating,
            "category" : self.category
        }

@app.get('/', tags=['inicio'])
def read_root():
    return HTMLResponse('<h2> Hola Mundo!</h2>')


movies = [     
    {
        "id": 1,
        "title": "Inception",
        "overview": "A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a C.E.O.",
        "year": 2010,
        "rating": 8.8,
        "category": "Sci-Fi"
    },
    {
        "id": 2,
        "title": "The Shawshank Redemption",
        "overview": "Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.",
        "year": 1994,
        "rating": 9.3,
        "category": "Drama"
    },
    {
        "id": 3,
        "title": "The Godfather",
        "overview": "The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.",
        "year": 1972,
        "rating": 9.2,
        "category": "Crime"
    },
    {
        "id": 4,
        "title": "The Dark Knight",
        "overview": "When the menace known as the Joker emerges from his mysterious past, he wreaks havoc and chaos on the people of Gotham.",
        "year": 2008,
        "rating": 9.0,
        "category": "Action"
    },
    {
        "id": 5,
        "title": "Pulp Fiction",
        "overview": "The lives of two mob hitmen, a boxer, a gangster and his wife, and a pair of diner bandits intertwine in four tales of violence and redemption.",
        "year": 1994,
        "rating": 8.9,
        "category": "Crime"
    } 
]

@app.post('/login', tags=['autenticatrion'])
def login(user: User):
    if user.email == 'nicolas' and user.password == '123':
        token: str = createToken(user.dict())
        print(token)
        return token
    

@app.get('/Movies', tags=['Movies'], dependencies=[Depends(BearerJWT())])
def get_movies():
    return JSONResponse(content=movies) #movies

@app.get('/Movies/{id}',tags=['Movies'])
def get_movie(id: int = Path(ge=1, le=100)):
    for item in movies:
        if item["id"] == id: 
            return item
    return []

@app.get('/Movies/', tags=['Movies'])
def get_movies_by_category(category: str = Query(min_lengh=3, max_lengh=15)):
    return category

@app.post('/Movies', tags=['Movies'], status_code=201)
def create_movie(movie: Movie):
    movies.append(movie)
    print(movies)
    return JSONResponse(content={'message':'Se ha cargado una nueva pelicuala','movie':[movie.to_dict() for m in movies]})

@app.put('/Movies{id}', tags=['Movies'])
def update_movie(id: int, movie:Movie):
    for item in movies:
        if item["id"] == id:
            item['title']= movie.title,
            item['overview']= movie.overview,
            item['year']= movie.year,
            item['rating']= movie.rating,
            item['category']= movie.category
            return JSONResponse(content={'message':'Se ha modificado la pelicula'})
    
@app.delete('/Movies{id}', tags=['Movies'])
def delete_movie(id:int):
    for item in movies:
        if item["id"] == id:
            movies.remove(item)
            return JSONResponse(content={'message':'Se ha eliminado la pelicula'})